from __future__ import annotations

import sys
from pathlib import Path
from typing import Optional

# Ajouter le r√©pertoire racine au path pour les imports
racine_projet = Path(__file__).resolve().parents[3]
sys.path.insert(0, str(racine_projet))

from config.settings import obtenir_parametres
from .text_encoder import EncodeurTexte, charger_encodeur_texte_depuis_parametres


_encodeur_texte_singleton: Optional[EncodeurTexte] = None


def obtenir_encodeur_texte() -> EncodeurTexte:
    """Retourne une instance EncodeurTexte mise en cache configur√©e via les param√®tres.

    Cela √©vite de recharger le gros mod√®le d'embedding plusieurs fois.
    """
    global _encodeur_texte_singleton
    if _encodeur_texte_singleton is None:
        print("üîÑ [MODEL_MANAGER] Premier chargement de l'encodeur...")
        parametres = obtenir_parametres()
        print(f"üîÑ [MODEL_MANAGER] Mod√®le: {parametres.ID_MODELE_EMBEDDING}, Device: {parametres.PERIPHERIQUE_EMBEDDING}")
        _encodeur_texte_singleton = charger_encodeur_texte_depuis_parametres(parametres)
        print(f"‚úÖ [MODEL_MANAGER] Encodeur charg√© avec succ√®s")
    else:
        print(f"‚ôªÔ∏è  [MODEL_MANAGER] Utilisation de l'encodeur en cache: {_encodeur_texte_singleton.id_modele}")
    return _encodeur_texte_singleton


def recharger_encodeur_texte() -> EncodeurTexte:
    """Force le rechargement de l'encodeur depuis les param√®tres actuels.
    
    Utilis√© quand la configuration du mod√®le change (mod√®le ou p√©riph√©rique).
    ATTENTION : Peut prendre plusieurs secondes pour les gros mod√®les (ex: Qwen3 ~8GB).
    
    Returns:
        Le nouvel encodeur recharg√©
    """
    global _encodeur_texte_singleton
    print("üîÑ [MODEL_MANAGER] Rechargement forc√© de l'encodeur...")
    parametres = obtenir_parametres()
    print(f"üîÑ [MODEL_MANAGER] Nouveau mod√®le: {parametres.ID_MODELE_EMBEDDING}, Device: {parametres.PERIPHERIQUE_EMBEDDING}")
    try:
        _encodeur_texte_singleton = charger_encodeur_texte_depuis_parametres(parametres)
        print(f"‚úÖ [MODEL_MANAGER] Encodeur recharg√© avec succ√®s")
    except Exception as e:
        print(f"‚ùå [MODEL_MANAGER] Erreur lors du rechargement: {e}")
        import traceback
        traceback.print_exc()
        raise
    return _encodeur_texte_singleton


def obtenir_id_modele_actuel() -> str:
    """Retourne l'ID du mod√®le actuellement charg√© dans le singleton.
    
    Returns:
        ID du mod√®le ou None si aucun encodeur n'est charg√©
    """
    global _encodeur_texte_singleton
    if _encodeur_texte_singleton is None:
        return None
    return _encodeur_texte_singleton.id_modele


